rules:
  html_custom_false:
    description: "Standard Hugo posts (no custom HTML)"
    match_front_matter:
      custom_html: false
    best_practices:
      - standard_hugo_markdown: true

  html_custom_normal:
    description: "Normal HTML posts (CSS & JS overrides without 3D)"
    match_front_matter:
      custom_html: normal
    requirements:
      - html_structure:
          forbid_full_document_tags: ["!DOCTYPE", "html", "head", "body"]
          scoped_styles: true
          preserve_hugo_layout: true
      - script_handling:
          allow_module_scripts: true

  html_custom_embed:
    description: "Inline Three.js embed posts"
    match_front_matter:
      custom_html: embed
    requirements:
      - html_structure:
          container_class: "threejs-container"
          scoped_styles: true
          preserve_hugo_layout: true
      - script_handling:
          external_scripts_last: true
          module_scripts: true

  html_custom_fullscreen:
    description: "Full-screen Three.js background posts (no controls)"
    match_front_matter:
      custom_html: full-screen
    requirements:
      - html_structure:
          forbid_full_document_tags: ["!DOCTYPE", "html", "head", "body"]
          container_class: "threejs-container"
          preserve_hugo_layout: false
      - script_handling:
          external_scripts_last: true
          module_scripts: true
      - responsive_design:
          full_viewport: true
    implementation_guide:
      - container_structure: |
          Place a single `<style>` block immediately after the front matter to hold all custom CSS for the post.
          Immediately after the `<style>` block, wrap the animation scene (scripts, etc.) in a single div.
          Use class="threejs-container" for Three.js or class="webgl-container" for generic WebGL.
          Example:
          ```html
          ---
          frontmatter
          ---
          <style>
            /* Styles for .threejs-container, canvas, AND .content-container go here */
            .threejs-container {
              position: fixed;
              top: 0;
              left: 0;
              width: 100vw;
              height: 100vh;
              z-index: -1;
              /* ... other styles */
            }

            .threejs-container canvas {
              display: block;
              width: 100%;
              height: 100%;
            }

            .content-container {
               /* ... content overlay styles */
               background: rgba(0, 0, 0, 0.1);
               border-radius: 8px;
               box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
               padding: 2rem;
               margin: 5vh auto;
               max-width: 800px;
               position: relative;
               z-index: 1;
            }
          </style>

          <div class="threejs-container"> <!-- Container div -->
          <canvas id="threejs-container"></canvas> <!-- Canvas element -->
            <!-- All <script type="importmap">, <script type="module">, etc. go here -->
            <script>...</script>
          </div>
          ```
      - mobile_fullscreen_threejs_best_practices: |
          To ensure a Three.js background always fills the entire viewport on mobile and prevents layout shift (such as when the address bar hides on scroll):
          1. Detect mobile devices (user agent or window.matchMedia).
          2. In the resize handler, set the renderer size to window.innerWidth by window.innerHeight * 1.15 (or a similar factor) on mobile. This ensures the scene always overflows the viewport and prevents gaps or layout shift when the viewport height increases.
          3. For PerspectiveCamera: Adjust the camera's FOV and position on mobile to "zoom in" so the scene fills the viewport, rather than being squeezed or letterboxed.
          4. For OrthographicCamera: Adjust the camera's left/right/top/bottom bounds (or increase camera.zoom) so the visible area is smaller than the renderer, causing the scene to overfill the viewport. Example:
             ```js
             const aspect = width / height;
             const overfill = 1.15; // same as renderer overfill
             camera.left = -aspect * overfill / 2;
             camera.right = aspect * overfill / 2;
             camera.top = overfill / 2;
             camera.bottom = -overfill / 2;
             camera.updateProjectionMatrix();
             ```
          5. On desktop, use the standard logic (renderer size = window.innerWidth x initialHeight, standard camera settings).
          6. Always update the camera's aspect ratio (for Perspective) or bounds (for Orthographic) and call updateProjectionMatrix after resizing.
          This approach ensures the Three.js background fills the viewport at all times on mobile, with no layout shift as the address bar appears/disappears.

  html_custom_controls:
    description: "Full-screen Three.js background posts with OrbitControls"
    match_front_matter:
      custom_html: controls
    requirements:
      - html_structure:
          forbid_full_document_tags: ["!DOCTYPE", "html", "head", "body"]
          global_body_styles: true
          preserve_hugo_layout: false
      - script_handling:
          external_scripts_last: true
          module_scripts: true
          require_orbitcontrols: true
      - responsive_design:
          full_viewport: true